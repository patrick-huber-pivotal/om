// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	pivnet "github.com/pivotal-cf/go-pivnet"
	log "github.com/pivotal-cf/go-pivnet/logger"
	"github.com/pivotal-cf/om/commands"
)

type PivnetClientFactory struct {
	NewClientStub        func(config pivnet.ClientConfig, logger log.Logger) commands.PivnetDownloader
	newClientMutex       sync.RWMutex
	newClientArgsForCall []struct {
		config pivnet.ClientConfig
		logger log.Logger
	}
	newClientReturns struct {
		result1 commands.PivnetDownloader
	}
	newClientReturnsOnCall map[int]struct {
		result1 commands.PivnetDownloader
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PivnetClientFactory) NewClient(config pivnet.ClientConfig, logger log.Logger) commands.PivnetDownloader {
	fake.newClientMutex.Lock()
	ret, specificReturn := fake.newClientReturnsOnCall[len(fake.newClientArgsForCall)]
	fake.newClientArgsForCall = append(fake.newClientArgsForCall, struct {
		config pivnet.ClientConfig
		logger log.Logger
	}{config, logger})
	fake.recordInvocation("NewClient", []interface{}{config, logger})
	fake.newClientMutex.Unlock()
	if fake.NewClientStub != nil {
		return fake.NewClientStub(config, logger)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newClientReturns.result1
}

func (fake *PivnetClientFactory) NewClientCallCount() int {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return len(fake.newClientArgsForCall)
}

func (fake *PivnetClientFactory) NewClientArgsForCall(i int) (pivnet.ClientConfig, log.Logger) {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return fake.newClientArgsForCall[i].config, fake.newClientArgsForCall[i].logger
}

func (fake *PivnetClientFactory) NewClientReturns(result1 commands.PivnetDownloader) {
	fake.NewClientStub = nil
	fake.newClientReturns = struct {
		result1 commands.PivnetDownloader
	}{result1}
}

func (fake *PivnetClientFactory) NewClientReturnsOnCall(i int, result1 commands.PivnetDownloader) {
	fake.NewClientStub = nil
	if fake.newClientReturnsOnCall == nil {
		fake.newClientReturnsOnCall = make(map[int]struct {
			result1 commands.PivnetDownloader
		})
	}
	fake.newClientReturnsOnCall[i] = struct {
		result1 commands.PivnetDownloader
	}{result1}
}

func (fake *PivnetClientFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PivnetClientFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commands.PivnetClientFactory = new(PivnetClientFactory)
